#pragma kernel FinalDensity

RWStructuredBuffer<float3> chunkPoints;
RWStructuredBuffer<float> densities;
RWStructuredBuffer<float> noisePoints;


int nPointsX;
int nPointsY;
int nPointsZ;
uint3 chunkCoords;
float3 boundsSize;
float3 centre;
float spacing;

float noiseRes;
float aux;

RWStructuredBuffer<float2> gradients;

int indexFromCoord(uint x, uint y, uint z)
{
    return z * nPointsY * nPointsX + y * nPointsX + x;
}

int indexFromCoord(uint x, uint z)
{
    return z * nPointsX + x;
}



static const int numThreads = 8;




[numthreads(numThreads, numThreads, numThreads)]
void FinalDensity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= nPointsX || id.y >= nPointsY || id.z >= nPointsZ)
    {
        return;
    }
    int index = indexFromCoord(id.x, id.y, id.z);
    float3 pos = centre.xyz + chunkPoints[index].xyz;
    
    int noiseIndex = indexFromCoord(id.x, id.z);

    
    float density = 0;
    
    if (noisePoints[noiseIndex] > (float) id.y / (float) nPointsY)
    {
        density = 1;
    }
    else
    {
        density = -1;
    }
    
   
    densities[index] = density;
}