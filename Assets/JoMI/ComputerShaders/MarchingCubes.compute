#include "MarchTables.compute"
#pragma kernel March


static const int numThreads = 8;

struct Triangle {
    float3 vertexC;
    float3 vertexB;
    float3 vertexA;
};

AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float3> points;
RWStructuredBuffer<float> densities;


float xAxis;
float yAxis;
float zAxis;
float isoLevel;

float3 interpolateVerts(float4 v1, float4 v2) {
    
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz-v1.xyz);
}

int indexFromCoord(int x, int y, int z) {
    return z * yAxis * xAxis + y * xAxis + x;
}

[numthreads(numThreads,numThreads,numThreads)]
void March (int3 id : SV_DispatchThreadID)
{   
    
    if (id.x >= xAxis - 1 || id.y >= yAxis - 1 || id.z >= zAxis - 1)
    {
        return;
    }

    
    int cubeCornersIndexs[8] =
    {
        indexFromCoord(id.x, id.y, id.z),
          indexFromCoord(id.x + 1, id.y, id.z),
          indexFromCoord(id.x + 1, id.y, id.z + 1),
          indexFromCoord(id.x, id.y, id.z + 1),
          indexFromCoord(id.x, id.y + 1, id.z),
          indexFromCoord(id.x + 1, id.y + 1, id.z),
          indexFromCoord(id.x + 1, id.y + 1, id.z + 1),
          indexFromCoord(id.x, id.y + 1, id.z + 1)
        
    };
    
   
    
    
    int cubeIndex = 0;
    if (densities[cubeCornersIndexs[0]] < isoLevel)
        cubeIndex |= 1;
    if (densities[cubeCornersIndexs[1]] < isoLevel)
        cubeIndex |= 2;
    if (densities[cubeCornersIndexs[2]] < isoLevel)
        cubeIndex |= 4;
    if (densities[cubeCornersIndexs[3]] < isoLevel)
        cubeIndex |= 8;
    if (densities[cubeCornersIndexs[4]] < isoLevel)
        cubeIndex |= 16;
    if (densities[cubeCornersIndexs[5]] < isoLevel)
        cubeIndex |= 32;
    if (densities[cubeCornersIndexs[6]] < isoLevel)
        cubeIndex |= 64;
    if (densities[cubeCornersIndexs[7]] < isoLevel)
        cubeIndex |= 128;
    
    
    for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3)
    {
        
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 2]];

        Triangle tri;
        tri.vertexA = interpolateVerts(float4(points[cubeCornersIndexs[a0]], densities[cubeCornersIndexs[a0]]), float4(points[cubeCornersIndexs[b0]], densities[cubeCornersIndexs[b0]]));
        tri.vertexB = interpolateVerts(float4(points[cubeCornersIndexs[a1]], densities[cubeCornersIndexs[a1]]), float4(points[cubeCornersIndexs[b1]], densities[cubeCornersIndexs[b1]]));
        tri.vertexC = interpolateVerts(float4(points[cubeCornersIndexs[a2]], densities[cubeCornersIndexs[a2]]), float4(points[cubeCornersIndexs[b2]], densities[cubeCornersIndexs[b2]]));
        triangles.Append(tri);
    }
    
    
    /* old
    if (id.x >= xAxis - 1 || id.y >= yAxis - 1 || id.z >= zAxis - 1)
    {
        return;
    }

    
    float4 cubeCorners[8] = {
        points[indexFromCoord(id.x, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1)]
    };
    
    
    int cubeIndex = 0;
    if (cubeCorners[0].w < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w < isoLevel) cubeIndex |= 128;
    
    
    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) {
        
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i+1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i+1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i+2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i+2]];

        Triangle tri;
        tri.vertexA = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
        tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
        tri.vertexC = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);
        triangles.Append(tri);
    }
    */
}